name: Auto-merge labeled PRs (reliable)

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, ready_for_review]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ['Shipyard CI']   # MUST match your CI workflow name exactly
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read
  actions: read

concurrency:
  group: automerge-${{ github.event.pull_request.number || github.event.workflow_run?.id || github.event.check_suite?.id }}
  cancel-in-progress: false

jobs:
  merge:
    runs-on: ubuntu-latest

    steps:
      - name: Determine PR number & head SHA
        id: info
        uses: actions/github-script@v7
        with:
          script: |
            const e = context.payload;
            let pr = null, sha = null;

            if (context.eventName.startsWith('pull_request')) {
              pr = e.pull_request.number;
              sha = e.pull_request.head.sha;
            } else if (context.eventName === 'workflow_run') {
              sha = e.workflow_run.head_sha;
            } else if (context.eventName === 'check_suite') {
              sha = e.check_suite.head_sha;
            }

            if (!pr && sha) {
              const { data } = await github.request('GET /repos/{owner}/{repo}/commits/{ref}/pulls', {
                owner: context.repo.owner, repo: context.repo.repo, ref: sha,
                mediaType: { previews: ['groot'] }
              });
              pr = data[0]?.number || null;
            }

            core.setOutput('pr', pr || '');
            core.setOutput('sha', sha || '');

      - name: Abort if no PR found
        if: steps.info.outputs.pr == ''
        run: echo "No PR associated with this SHA; nothing to do."

      - name: Require 'automerge' label
        if: steps.info.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number('${{ steps.info.outputs.pr }}');
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: pr
            });
            const names = labels.map(l => l.name);
            core.info('Labels: ' + names.join(', '));
            if (!names.includes('automerge')) {
              core.setFailed("PR missing 'automerge' label.");
            }

      - name: Wait until ALL other checks are successful
        if: steps.info.outputs.pr != ''
        uses: actions/github-script@v7
        env:
          SHA: ${{ steps.info.outputs.sha }}
          RUN_ID: ${{ github.run_id }}
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const sha   = process.env.SHA;
            const runId = Number(process.env.RUN_ID);
            const sleep = ms => new Promise(r => setTimeout(r, ms));
            const deadline = Date.now() + 20 * 60 * 1000; // 20 min

            function okConclusion(c) {
              return ['success','neutral','skipped'].includes(c || '');
            }

            async function othersAllGreen() {
              // 1) Legacy status contexts (often empty with modern checks)
              const { data: status } =
                await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref: sha });
              const contextsOk = status.state === 'success' || status.statuses.length === 0;

              // 2) Identify this run's check_run IDs so we can ignore ourselves
              const { data: jobs } =
                await github.rest.actions.listJobsForWorkflowRun({ owner, repo, run_id: runId });
              const selfIds = new Set(jobs.jobs.map(j => j.check_run_id).filter(Boolean));

              // 3) Modern check runs, excluding our own
              const { data: checks } =
                await github.rest.checks.listForRef({ owner, repo, ref: sha, filter: 'latest' });
              const others = (checks.check_runs || []).filter(r => !selfIds.has(r.id));

              const allOk = others.every(r => r.status === 'completed' && okConclusion(r.conclusion));
              return contextsOk && allOk;
            }

            while (Date.now() < deadline) {
              if (await othersAllGreen()) {
                core.info('All external checks are green.');
                return;
              }
              core.info('Waiting for external checksâ€¦');
              await sleep(10000);
            }
            core.setFailed('Timeout waiting for checks to succeed.');

      - name: Merge (squash) when green
        if: steps.info.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number('${{ steps.info.outputs.pr }}');
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: pr,
              merge_method: 'squash'
            });
            core.info('Merged PR #' + pr);
