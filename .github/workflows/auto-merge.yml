name: Auto-merge labeled PRs (reliable)

on:
  pull_request:
    types: [opened, reopened, synchronize, labeled, ready_for_review]
  check_suite:
    types: [completed]
  workflow_run:
    workflows: ['Shipyard CI']   # MUST match your CI workflow name exactly
    types: [completed]

permissions:
  contents: write
  pull-requests: write
  checks: read
  statuses: read

jobs:
  merge:
    runs-on: ubuntu-latest

    steps:
      - name: Determine PR number & head SHA
        id: info
        uses: actions/github-script@v7
        with:
          script: |
            const e = context.payload;
            let pr = null, sha = null;

            if (context.eventName === 'pull_request') {
              pr  = e.pull_request.number;
              sha = e.pull_request.head.sha;
            } else if (context.eventName === 'workflow_run') {
              sha = e.workflow_run.head_sha;
            } else if (context.eventName === 'check_suite') {
              sha = e.check_suite.head_sha;
            }

            if (!pr && sha) {
              const { data } = await github.request('GET /repos/{owner}/{repo}/commits/{ref}/pulls', {
                owner: context.repo.owner, repo: context.repo.repo, ref: sha,
                mediaType: { previews: ['groot'] }
              });
              pr = data[0]?.number || null;
            }

            core.info(`event=${context.eventName} pr=${pr} sha=${sha}`);
            core.setOutput('pr', pr || '');
            core.setOutput('sha', sha || '');

      - name: Abort if no PR found
        if: steps.info.outputs.pr == ''
        run: echo "No PR associated with this SHA; nothing to do."

      - name: Require 'automerge' label
        if: steps.info.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number('${{ steps.info.outputs.pr }}');
            const { data: labels } = await github.rest.issues.listLabelsOnIssue({
              owner: context.repo.owner, repo: context.repo.repo, issue_number: pr
            });
            const names = labels.map(l => l.name);
            core.info('Labels: ' + names.join(', '));
            if (!names.includes('automerge')) {
              core.setFailed("PR missing 'automerge' label.");
            }

      - name: Wait until ALL checks are successful (timeout 20m)
        if: steps.info.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const sha   = '${{ steps.info.outputs.sha }}';
            const sleep = ms => new Promise(r => setTimeout(r, ms));
            const deadline = Date.now() + 20*60*1000;

            async function allGreen() {
              const { data: status } = await github.rest.repos.getCombinedStatusForRef({ owner, repo, ref: sha });
              const contextsOk = status.state === 'success';

              const { data: checks } = await github.rest.checks.listForRef({ owner, repo, ref: sha });
              const runs = checks.check_runs || [];
              const ok = new Set(['success','neutral','skipped']);
              const checksOk = runs.every(r => ok.has(r.conclusion || 'success'));

              core.info(`contextsOk=${contextsOk} checksOk=${checksOk} runs=${runs.length}`);
              return contextsOk && checksOk;
            }

            while (Date.now() < deadline) {
              if (await allGreen()) return;
              await sleep(10000);
            }
            core.setFailed('Timeout waiting for all checks to succeed.');

      - name: Merge (squash) when green
        if: steps.info.outputs.pr != ''
        uses: actions/github-script@v7
        with:
          script: |
            const pr = Number('${{ steps.info.outputs.pr }}');
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo:  context.repo.repo,
              pull_number: pr,
              merge_method: 'squash'
            });
            core.info('Merged PR #' + pr);
